if (${CANDY_DEVEL})
    aux_source_directory(. DIR_SRCS)
    add_library(${CANDY_LIBRARY_NAME} SHARED ${DIR_SRCS})

    set_target_properties(${CANDY_LIBRARY_NAME} PROPERTIES OUTPUT_NAME ${CMAKE_PROJECT_NAME})
    set_target_properties(${CANDY_LIBRARY_NAME} PROPERTIES CXX_STANDARD 20)

    include(${PROJECT_SOURCE_DIR}/cmake/fmt.cmake)
    include(${PROJECT_SOURCE_DIR}/cmake/liburiparser.cmake)
    include(${PROJECT_SOURCE_DIR}/cmake/poco.cmake)
    include(${PROJECT_SOURCE_DIR}/cmake/spdlog.cmake)

    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE core)
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE websocket)
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE tun)
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE peer)
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE utility)

    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE ${FMT_LIBRARIES})
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE ${LIBURIPARSER_LIBRARIES})
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE Poco::Foundation Poco::Net Poco::NetSSL)
    target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE ${SPDLOG_LIBRARIES})
    if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
        target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE iphlpapi)
        target_link_libraries(${CANDY_LIBRARY_NAME} PRIVATE ws2_32)
    endif()

    install(FILES candy.h DESTINATION include)
    install(TARGETS ${CANDY_LIBRARY_NAME} LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()
